{"version":3,"sources":["toast.tsx"],"names":["React","useRef","useEffect","useState","View","StyleSheet","Animated","Text","TouchableWithoutFeedback","Toast","id","onClose","icon","type","message","duration","style","textStyle","successIcon","dangerIcon","warningIcon","successColor","dangerColor","warningColor","placement","onPress","containerRef","animation","Value","timing","toValue","useNativeDriver","start","closeTimeout","setTimeout","clearTimeout","undefined","animationStyle","opacity","transform","translateY","interpolate","inputRange","outputRange","backgroundColor","renderToast","styles","container","iconContainer","isValidElement","create","paddingHorizontal","paddingVertical","borderRadius","marginVertical","flexDirection","alignItems","color","fontWeight","marginRight"],"mappings":"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","sourcesContent":["import React, { FC, useRef, useEffect, useState } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Animated,\r\n  StyleProp,\r\n  ViewStyle,\r\n  TextStyle,\r\n  Text,\r\n  TouchableWithoutFeedback,\r\n} from \"react-native\";\r\n\r\nexport interface ToastOptions {\r\n  icon?: JSX.Element;\r\n  type?: \"normal\" | \"success\" | \"danger\" | \"warning\";\r\n  duration?: number;\r\n  style?: StyleProp<ViewStyle>;\r\n  textStyle?: StyleProp<TextStyle>;\r\n\r\n  successIcon?: JSX.Element;\r\n  dangerIcon?: JSX.Element;\r\n  warningIcon?: JSX.Element;\r\n\r\n  successColor?: string;\r\n  dangerColor?: string;\r\n  warningColor?: string;\r\n\r\n  onPress?(id: string): void;\r\n}\r\n\r\nexport interface ToastProps extends ToastOptions {\r\n  id: string;\r\n  onClose(): void;\r\n  message: string | JSX.Element;\r\n  placement?: \"top\" | \"bottom\";\r\n}\r\n\r\nconst Toast: FC<ToastProps> = ({\r\n  id,\r\n  onClose,\r\n  icon,\r\n  type = \"normal\",\r\n  message,\r\n  duration = 3000,\r\n  style,\r\n  textStyle,\r\n\r\n  successIcon,\r\n  dangerIcon,\r\n  warningIcon,\r\n\r\n  successColor,\r\n  dangerColor,\r\n  warningColor,\r\n\r\n  placement,\r\n\r\n  onPress,\r\n}) => {\r\n  const containerRef = useRef<View>(null);\r\n  const [animation] = useState(new Animated.Value(0));\r\n\r\n  useEffect(() => {\r\n    Animated.timing(animation, {\r\n      toValue: 1,\r\n      useNativeDriver: true,\r\n      duration: 250,\r\n    }).start();\r\n\r\n    let closeTimeout: NodeJS.Timeout | null = null;\r\n\r\n    if (duration !== 0 && typeof duration === \"number\") {\r\n      closeTimeout = setTimeout(() => {\r\n        Animated.timing(animation, {\r\n          toValue: 0,\r\n          useNativeDriver: true,\r\n          duration: 250,\r\n        }).start(() => onClose());\r\n      }, duration);\r\n    }\r\n\r\n    return () => {\r\n      closeTimeout && clearTimeout(closeTimeout);\r\n    };\r\n  }, []);\r\n\r\n  if (icon === undefined) {\r\n    switch (type) {\r\n      case \"success\": {\r\n        if (successIcon) {\r\n          icon = successIcon;\r\n        }\r\n        break;\r\n      }\r\n\r\n      case \"danger\": {\r\n        if (dangerIcon) {\r\n          icon = dangerIcon;\r\n        }\r\n        break;\r\n      }\r\n      case \"warning\": {\r\n        if (warningIcon) {\r\n          icon = warningIcon;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  const animationStyle = {\r\n    opacity: animation,\r\n    transform: [\r\n      {\r\n        translateY: animation.interpolate({\r\n          inputRange: [0, 1],\r\n          outputRange: placement === \"bottom\" ? [20, 0] : [0, 20], // 0 : 150, 0.5 : 75, 1 : 0\r\n        }),\r\n      },\r\n    ],\r\n  };\r\n\r\n  let backgroundColor = \"#333\";\r\n  switch (type) {\r\n    case \"success\":\r\n      backgroundColor = successColor || \"#00C851\";\r\n      break;\r\n    case \"danger\":\r\n      backgroundColor = dangerColor || \"#ff4444\";\r\n      break;\r\n    case \"warning\":\r\n      backgroundColor = warningColor || \"#ffbb33\";\r\n  }\r\n\r\n  const renderToast = () => (\r\n    <Animated.View\r\n      ref={containerRef}\r\n      style={[styles.container, animationStyle, { backgroundColor }, style]}\r\n    >\r\n      {icon ? <View style={styles.iconContainer}>{icon}</View> : null}\r\n      {React.isValidElement(message) ? (\r\n        message\r\n      ) : (\r\n        <Text style={[styles.message, textStyle]}>{message}</Text>\r\n      )}\r\n    </Animated.View>\r\n  );\r\n\r\n  return onPress ? (\r\n    <TouchableWithoutFeedback onPress={() => onPress(id)}>\r\n      {renderToast()}\r\n    </TouchableWithoutFeedback>\r\n  ) : (\r\n    renderToast()\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 12,\r\n    borderRadius: 5,\r\n    marginVertical: 5,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  message: {\r\n    color: \"#fff\",\r\n    fontWeight: \"500\",\r\n  },\r\n  iconContainer: {\r\n    marginRight: 5,\r\n  },\r\n});\r\n\r\nexport default Toast;\r\n"]}